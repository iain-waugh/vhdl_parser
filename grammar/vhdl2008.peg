# VHDL-2008 grammar based on IEEE 1076-12008
# Copyright <c> Iain Waugh 2022
vhdl2008 <-  design_file
Spacing <- (Space / Comment)
Space <- ' ' / '\t' / EndOfLine
EndOfLine <- '\r\n' / '\n' / '\r'
_todo_ <- name ( Space name )*
%whitespace <- Spacing*
EndOfFile <- !.

# ------------------------------------------------------------------------
# Comments : Section 15.9
# Ignored with the '~' operator
~Comment <- '--' (!EndOfLine . )* EndOfLine

# ------------------------------------------------------------------------
# Reserved words : Section 15.10
_abs          <- 'abs'i
_access       <- 'access'i
_after        <- 'after'i
_alias        <- 'alias'i
_all          <- 'all'i
_and          <- 'and'i
_architecture <- 'architecture'i
_array        <- 'array'i
_assert       <- 'assert'i
_assume       <- 'assume'i # VHDL-2008 only
_assume_guarantee <- 'assume_guarantee'i # VHDL-2008 only
_attribute    <- 'attribute'i
_begin        <- 'begin'i
_block        <- 'block'i
_body         <- 'body'i
_buffer       <- 'buffer'i
_bus          <- 'bus'i
_case         <- 'case'i
_component    <- 'component'i
_configuration <- 'configuration'i
_constant     <- 'constant'i
_context      <- 'context'i # VHDL-2008 only
_cover        <- 'cover'i   # VHDL-2008 only
_default      <- 'default'i # VHDL-2008 only
_disconnect   <- 'disconnect'i
_downto       <- 'downto'i
_else         <- 'else'i
_elsif        <- 'elsif'i
_end          <- 'end'i
_entity       <- 'entity'i
_exit         <- 'exit'i
_fairness     <- 'fairness'i  # VHDL-2008 only
_file         <- 'file'i
_for          <- 'for'i
_force        <- 'force'i  # VHDL-2008 only
_function     <- 'function'i
_generate     <- 'generate'i
_generic      <- 'generic'i
_group        <- 'group'i
_guarded      <- 'guarded'i
_if           <- 'if'i
_impure       <- 'impure'i
_in           <- 'in'i
_inertial     <- 'inertial'i
_inout        <- 'inout'i
_is           <- 'is'i
_label        <- 'label'i
_library      <- 'library'i
_linkage      <- 'linkage'i
_literal      <- 'literal'i
_loop         <- 'loop'i
_map          <- 'map'i
_mod          <- 'mod'i
_nand         <- 'nand'i
_new          <- 'new'i
_next         <- 'next'i
_nor          <- 'nor'i
_not          <- 'not'i
_null         <- 'null'i
_of           <- 'of'i
_on           <- 'on'i
_open         <- 'open'i
_or           <- 'or'i
_others       <- 'others'i
_out          <- 'out'i
_package      <- 'package'i
_parameter    <- 'parameter'i  # VHDL-2008 only
_port         <- 'port'i
_postponed    <- 'postponed'i
_procedure    <- 'procedure'i
_process      <- 'process'i
_property     <- 'property'i   # VHDL-2008 only
_protected    <- 'protected'i  # VHDL-2008 only
_pure         <- 'pure'i
_range        <- 'range'i
_record       <- 'record'i
_register     <- 'register'i
_reject       <- 'reject'i
_release      <- 'release'i  # VHDL-2008 only
_rem          <- 'rem'i
_report       <- 'report'i
_restrict     <- 'restrict'i  # VHDL-2008 only
_restrict_guarantee <- 'restrict_guarantee'i  # VHDL-2008 only
_return       <- 'return'i
_rol          <- 'rol'i
_ror          <- 'ror'i
_select       <- 'select'i
_severity     <- 'severity'i
_signal       <- 'signal'i
_shared       <- 'shared'i
_sla          <- 'sla'i
_sll          <- 'sll'i
_sra          <- 'sra'i
_srl          <- 'srl'i
_strong       <- 'strong'i  # VHDL-2008 only
_subtype      <- 'subtype'i
_then         <- 'then'i
_to           <- 'to'i
_transport    <- 'transport'i
_type         <- 'type'i
_unaffected   <- 'unaffected'i
_units        <- 'units'i
_until        <- 'until'i
_use          <- 'use'i
_variable     <- 'variable'i
_vmode        <- 'vmode'i  # VHDL-2008 only
_vprop        <- 'vprop'i  # VHDL-2008 only
_vunit        <- 'vunit'i  # VHDL-2008 only
_wait         <- 'wait'i
_when         <- 'when'i
_while        <- 'while'i
_with         <- 'with'i
_xnor         <- 'xnor'i
_xor          <- 'xor'i

# ------------------------------------------------------------------------
# Character set : Section 15.2
upper_case_letter <- [A-Z] / [ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞ]
lower_case_letter <- [a-z] / [àáâãäåæçèéêëìíîïðñòóôõöøùúûüýþ]
special_character <- backslash / [\'#&\'()*+,-./:;<=>?@\[\]_`|]
other_special_character <- [$%\\^{}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿×÷]
format_effector <- '\t' / '\r' / '/n' / 
digit <- [0-9]

# ------------------------------------------------------------------------
# Lexical elements, separators, and delimiters : Section 15.3

# Delimiters
colon     <- ':'
semicolon <- ';'
lrpar     <- '('
rrpar     <- ')'
tick      <- '`'
quot_s    <- "'"
quot_d    <- '"'
backslash <- '\\'
hash      <- '#'
dot       <- '.'
plus      <- '+'
comma     <- ','
minus     <- '-'
mult      <- '*'
div       <- '/'
equal     <- '='
concat    <- '&'
less_than <- '<'
grtr_than <- '>'

delimiter <- [&\'()*+,-./:;<=>`|\[\]?@]
underline <- '_'
space_character <- ' '

# Compound delimiters
arrow          <- '=>'
exponential    <- '**'
var_assignment <- ':='
not_equal      <- '/='
less_or_equal  <- '<='
grtr_or_equal  <- '>='
box            <- '<>'
condition_operator     <- '??'   # VHDL-2008 only
matching_equality      <- '?='   # VHDL-2008 only
matching_inequality    <- '?/='  # VHDL-2008 only
matching_less_than     <- '?<'   # VHDL-2008 only
matching_less_or_equal <- '?<='  # VHDL-2008 only
matching_grtr_than     <- '?>'   # VHDL-2008 only
matching_grtr_or_equal <- '?>='  # VHDL-2008 only
double_less            <- '<<'   # VHDL-2008 only
double_grtr            <- '>>'   # VHDL-2008 only

# Section 15.2
graphic_character <-
basic_graphic_character / lower_case_letter / other_special_character

# Section 15.2
basic_graphic_character <-
upper_case_letter / digit / special_character / space_character

# Section 15.7
string_literal <- < quot_d ( graphic_character )* quot_d >

# Section 15.4.1
identifier <- basic_identifier / extended_identifier

# Section 5.3.3
identifier_list <- identifier ( comma identifier )*

# Section 15.4.2
basic_identifier <- < letter ( ( underline )? letter_or_digit )* >

# Section 15.4.2
letter <- upper_case_letter / lower_case_letter

# Section 15.4.2
letter_or_digit <- letter / digit

# Section 15.4.3
extended_identifier <- < backslash graphic_character ( graphic_character )* backslash >

# Section 8.1
name <-
simple_name
/ operator_symbol
/ character_literal
#/ selected_name
#/ indexed_name
#/ slice_name
#/ attribute_name
#/ external_name

# Section 8.2
simple_name <- identifier

# Section 15.6
character_literal <- quot_s graphic_character quot_s

# Section 4.2.1
operator_symbol <- string_literal

# Section 8.6
attribute_name <-
prefix ( signature )? quot_s attribute_designator ( lrpar expression rrpar )?

# Section 4.5.3
signature <- ( ( type_mark ( comma type_mark )* )? ( _return type_mark )? )?

# Section 8.6
attribute_designator <- attribute_simple_name
attribute_simple_name <- simple_name

# Section 5.2.1
direction <- _to / _downto


# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.27 - Design File

# Section 13.1
design_file <- design_unit ( design_unit )*

# Section 13.1
design_unit <- context_clause library_unit

# Section 13.4
context_clause <- ( context_item )*

# Section 13.4
context_item <-
library_clause
/ use_clause
# TODO / context_reference

# Section 13.1
library_unit <-
primary_unit
# TODO / secondary_unit

# Section 13.1
primary_unit <-
entity_declaration
# TODO / configuration_declaration
# TODO / package_declaration
# TODO / package_instantiation_declaration
# TODO / context_declaration
# TODO / PSL_Verification_Unit

# Section 13.1
# TODO secondary_unit <-
# TODO architecture_body
# TODO / package_body

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.30 - Entity Declaration

# Section 3.2.1
entity_declaration <-
_entity identifier _is
  entity_header
#  entity_declarative_part # Note: Rarely used
#( _begin
#  entity_statement_part )?
_end semicolon

  # Section 3.2.3
  entity_header <-
  ( formal_generic_clause )?
  ( formal_port_clause )?
  
    # Section 6.5.6.2
    formal_generic_clause <- generic_clause
    generic_clause <-
    _generic lrpar generic_list rrpar semicolon
    
    # Section 6.5.6.2
    generic_list <- generic_interface_list
    
    # Section 6.5.6.3
    formal_port_clause <- port_clause
    port_clause <-
    _port lrpar port_list rrpar semicolon
  
    # Section 6.5.6.3
    port_list <- port_interface_list
    
    # Section 6.5.6.1
    generic_interface_list <- interface_list
    port_interface_list <- interface_list
    
    interface_list <-
    interface_element ( semicolon interface_element )*
    
    # Section 6.5.6.1
    interface_element <- interface_declaration
    
    # Section 6.5.1
    interface_declaration <-
    interface_object_declaration
    # TODO / interface_type_declaration
    # TODO / interface_subprogram_declaration
    # TODO / interface_package_declaration
    
    # Section 6.5.2
    interface_object_declaration <-
    interface_signal_declaration
#    / interface_constant_declaration
    / interface_variable_declaration
    / interface_file_declaration

  # Section 3.2.3 - rarely used
  entity_declarative_part <-
  ( entity_declarative_item )*
  
    # Section 3.2.3
    entity_declarative_item <- _todo_ # TODO subprogram_declaration
    # TODO / subprogram_body
    # TODO / subprogram_instantiation_declaration
    # TODO / package_declaration
    # TODO / package_body
    # TODO / package_instantiation_declaration
    # TODO / type_declaration
    # TODO / subtype_declaration
    # TODO / constant_declaration
    # TODO / signal_declaration
    # TODO / shared_variable_declaration
    # TODO / file_declaration
    # TODO / alias_declaration
    # TODO / attribute_declaration
    # TODO / attribute_specification
    # TODO / disconnection_specification
    # TODO / use_clause
    # TODO / group_template_declaration
    # TODO / group_declaration
    # TODO / PSL_Property_Declaration
    # TODO / PSL_Sequence_Declaration
    # TODO / PSL_Clock_Declaration

  # Section 3.2.4
  entity_statement_part <-
  ( entity_statement )*

    # Section 3.2.4
    entity_statement <- _todo_
    # TODO concurrent_assertion_statement
    # TODO / passive_concurrent_procedure_call_statement
    # TODO / passive_process_statement
    # TODO / PSL_PSL_Directive

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.34 Expression

# Section 9.1
expression <-
logical_expression
# TODO / condition_operator primary  # VHDL-2008

  # Section 9.1
  logical_expression <-
  relation ( _and relation )*
  / relation ( _or relation )*
  / relation ( _xor relation )*
  / relation ( _nand relation )?
  / relation ( _nor relation )?
  / relation ( _xnor relation )*

  # Section 9.1
  relation <- shift_expression ( relational_operator shift_expression )?

    # Section 9.1
    shift_expression <-
    simple_expression ( shift_operator simple_expression )? 
    
       # Section 9.2.1
       shift_operator <- _sll / _srl / _sla / _sra / _rol / _ror

    # Section 9.2.1
    matching_operator <- matching_equality / matching_inequality / matching_less_than / matching_less_or_equal / matching_grtr_than / matching_grtr_or_equal
    relational_operator <- equal / not_equal / less_than / less_or_equal / grtr_than / grtr_or_equal / matching_operator

# Section 9.2.1
logical_operator <- _and / _or / _nand / _nor / _xor / _xnor

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.49 - Interface Constant Declaration

# Section 6.5.2
interface_constant_declaration <-
( _constant )? identifier_list colon ( _in )? subtype_indication ( var_assignment static_expression )?
static_expression <- expression

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.50 - Interface File Declaration

# Section 6.5.2
interface_file_declaration <-
_file identifier_list colon subtype_indication

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.51 - Interface Signal Declaration

# Section 6.5.2
interface_signal_declaration <-
( _signal )? identifier_list colon ( mode )? subtype_indication ( _bus )? ( var_assignment static_expression )?

  # Section 6.5.2
  mode <- _in / _out / _inout / _buffer / _linkage

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.52 - Interface Variable Declaration

# Section 6.5.2
interface_variable_declaration <-
( _variable )? identifier_list colon ( mode_mod )? subtype_indication ( var_assignment static_expression )?

  # Section 6.5.2
  mode_mod <- _in / _out / _inout / _buffer / _linkage

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.53 - Library Clause

# Section 13.2
library_clause <- _library logical_name_list semicolon

  # Section 13.2
  logical_name_list <- logical_name ( comma logical_name )*
  
    # Section 13.2
    logical_name <- identifier

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.69 - Selected Name

# Section 8.3
selected_name <- prefix dot suffix

  # Section 8.1
  prefix <-
  library_name dot name
  # TODO / function_call
  library_name <- name
  
  # Section 8.3
  suffix <-
  simple_name
  / character_literal
  / operator_symbol
  / _all

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.74 - Simple expression

# Section 9.1
simple_expression <-
( sign )? term ( adding_operator term )*

  # Section 9.2.1
  sign <- plus / minus
  
  # Section 9.1
  term <- 
  factor ( multiplying_operator factor )*
  
    # Section 9.1
    factor <-
    primary ( exponential primary )?
    / _abs primary
    / _not primary
    / logical_operator primary

      # Section 9.1
      primary <-
      name
#      / literal
#      / aggregate
#      / function_call
#      / qualified_expression
#      / type_conversion
#      / allocator
      / lrpar expression rrpar
    
    # Section 9.2.1
    multiplying_operator <- mult / div / _mod / _rem

  # Section 9.2
  adding_operator <- plus / minus / concat

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.80 Subtype Indication

# Section 6.3
subtype_indication <-
( resolution_indication )? type_mark ( constraint )?

  # Section 6.3
  resolution_indication <- resolution_function_name
#  resolution_indication <- resolution_function_name / lrpar element_resolution rrpar # VHDL-2008

    resolution_function_name <- name

  type_mark <- name

  # Section 6.3
  constraint <-
  range_constraint
  / index_constraint
# TODO  -VHDL 2008  / array_constraint
# TODO  -VHDL 2008  / record_constraint
  
    # Section 5.2.1
    range_constraint <- _range range
    
      # Section 5.2.1
      range <-
      range_attribute_name
      / simple_expression direction simple_expression
      range_attribute_name <- attribute_name

#    # Section 5.3.2.1
#    array_constraint <-
#    index_constraint ( array_element_constraint )?
#    / lrpar _open rrpar ( array_element_constraint )?

      # Section 5.3.2.1
      index_constraint <- lrpar discrete_range ( comma discrete_range )* rrpar

        # Section 5.3.2.1
        discrete_range <- range # / discrete_subtype_indication

#      # Section 5.3.2.1
#      array_element_constraint <- element_constraint
#
#        # Section 6.3
#        element_constraint <-
#        array_constraint
#        / record_constraint

# ------------------------------------------------------------------------
# A Guide To VHDL Syntax Section 2.84 - Use Clause

# Section 12.4
use_clause <-
_use selected_name ( comma selected_name )* semicolon
